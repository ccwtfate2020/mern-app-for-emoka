{"ast":null,"code":"var _excluded = [\"onKeyDown\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js';\nimport parsePhoneNumberCharacter from './helpers/parsePhoneNumberCharacter.js';\nimport useInputKeyDownHandler from './useInputKeyDownHandler.js';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's and maintains the caret's position in the process.\r\n   * The caret positioning is maintained using `input-format` library.\r\n   * Relies on being run in a DOM environment for calling caret positioning functions.\r\n   */\n  function InputSmart(_ref, ref) {\n    var onKeyDown = _ref.onKeyDown,\n      country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      _ref$metadata = _ref.metadata,\n      metadata = _ref$metadata === void 0 ? defaultMetadata : _ref$metadata,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      });\n      // Format the number.\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix);\n        // `AsYouType.getTemplate()` can be `undefined`.\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    var _onKeyDown = useInputKeyDownHandler({\n      onKeyDown: onKeyDown,\n      international: international\n    });\n    return /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format,\n      onKeyDown: _onKeyDown\n    }));\n  }\n  InputSmart = /*#__PURE__*/React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\r\n     * A function of `event: Event`.\r\n     * Handles `keydown` events.\r\n     */\n    onKeyDown: PropTypes.func,\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object\n  };\n  return InputSmart;\n}\nexport default createInput();","map":{"version":3,"names":["React","useCallback","PropTypes","Input","AsYouType","getInputValuePrefix","removeInputValuePrefix","parsePhoneNumberCharacter","useInputKeyDownHandler","createInput","defaultMetadata","InputSmart","_ref","ref","onKeyDown","country","international","withCountryCallingCode","_ref$metadata","metadata","rest","_objectWithoutProperties","_excluded","format","value","formatter","prefix","text","input","template","getTemplate","_onKeyDown","createElement","_extends","parse","forwardRef","propTypes","string","isRequired","onChange","func","bool","object"],"sources":["/app/node_modules/react-phone-number-input/source/InputSmart.js"],"sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js'\r\nimport parsePhoneNumberCharacter from './helpers/parsePhoneNumberCharacter.js'\r\n\r\nimport useInputKeyDownHandler from './useInputKeyDownHandler.js'\r\n\r\nexport function createInput(defaultMetadata)\r\n{\r\n\t/**\r\n\t * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's and maintains the caret's position in the process.\r\n\t * The caret positioning is maintained using `input-format` library.\r\n\t * Relies on being run in a DOM environment for calling caret positioning functions.\r\n\t */\r\n\tfunction InputSmart({\r\n\t\tonKeyDown,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata = defaultMetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t\tconst prefix = getInputValuePrefix({\r\n\t\t\t\tcountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\twithCountryCallingCode,\r\n\t\t\t\tmetadata\r\n\t\t\t})\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [country, metadata])\r\n\r\n\t\tconst _onKeyDown = useInputKeyDownHandler({\r\n\t\t\tonKeyDown,\r\n\t\t\tinternational\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}\r\n\t\t\t\tonKeyDown={_onKeyDown}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `event: Event`.\r\n\t\t * Handles `keydown` events.\r\n\t\t */\r\n\t\tonKeyDown: PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}